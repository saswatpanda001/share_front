{"ast":null,"code":"var _jsxFileName = \"/home/saswat/Desktop/Shareme/frontend/src/Components/chat/chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { DecodeToken } from '../token_decode';\nimport AxiosRequest from '../../axios';\nimport { Axios } from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chat = () => {\n  _s();\n\n  const user_id = DecodeToken(localStorage.getItem(\"access_token\")).user_id;\n  const [socketDetails, setSocketDetails] = useState({\n    user_id: null,\n    username: null,\n    ws_api: null\n  });\n  const location = useLocation();\n  const chat_id = location.pathname.slice(14);\n  const yy = location.pathname.slice(14);\n  const [message, setMessage] = useState(\"\");\n  const [messageData, setMessageData] = useState([]);\n\n  if (socketDetails.ws_api) {\n    socketDetails.ws_api.onopen = () => {\n      console.log(\"connection established\");\n    };\n\n    socketDetails.ws_api.onclose = () => {\n      console.log(\"disconnected\");\n    };\n\n    socketDetails.ws_api.onmessage = res => {\n      if (res.data) {\n        console.log(res.data);\n        retrieveMessages();\n      }\n    };\n  }\n\n  const socketMessages = () => {\n    const msg_data = JSON.stringify({\n      \"data\": message,\n      \"code\": chat_id,\n      \"type\": \"send\"\n    });\n\n    if (msg_data.data !== \"\") {\n      socketDetails.ws_api.send(msg_data);\n    }\n  };\n\n  const retrieveMessages = async () => {\n    const getMessage = await AxiosRequest.get(`/chat/text/${chat_id}`).then(res => {\n      console.log(res.data);\n      setMessageData(res.data);\n    }); // ws request to get message\n    // const messagesList = JSON.stringify({\"data\":message,\"code\":chat_id,\"type\":\"fetch\"})\n    // ws_api.send(messagesList); \n  }; // http request to store message\n  // const sendMessages = async() => {\n  //     const sendMessage = await AxiosRequest.post(`/chat/text/${chat_id}`,{\"data\":message})\n  //                         .then((res) => {retrieveMessages();})\n  // }\n\n\n  let RenderMessages = messageData.map(each => {\n    console.log(each);\n\n    if (user_id == each.sender) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-5 mt-3 mb-3\",\n        style: {\n          backgroundColor: \"pink\",\n          borderRadius: \"10px\",\n          padding: \"5px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontSize: \"13px\"\n            },\n            children: each.sender_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontSIZE: \"10px\"\n            },\n            children: each.time.slice(0, 10)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontSIZE: \"10px\"\n            },\n            children: each.time.slice(11, 17)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: \"15px\"\n          },\n          children: each.data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3 mb-3 col-md-5\",\n        style: {\n          backgroundColor: \"white\",\n          borderRadius: \"10px\",\n          padding: \"5px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: \"13px\"\n          },\n          children: each.sender_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: \"15px\"\n          },\n          children: each.data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this);\n    }\n  });\n  useEffect(() => {\n    const user_id = DecodeToken(localStorage.getItem(\"access_token\")).user_id;\n    const username = DecodeToken(localStorage.getItem(\"access_token\")).username;\n    const ws_api = new WebSocket(`ws://localhost:8000/ws/chat/${window.location.pathname.slice(14)}`);\n    setSocketDetails({\n      user_id: user_id,\n      username: username,\n      ws_api: ws_api\n    });\n    retrieveMessages();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid mt-4 ml-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Enter the message\",\n        onChange: e => {\n          setMessage(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-dark\",\n        onClick: socketMessages,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-8\",\n        children: RenderMessages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"P0ziLsjnRpbmg3A3Wo1aLaUO+vo=\", false, function () {\n  return [useLocation];\n});\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/home/saswat/Desktop/Shareme/frontend/src/Components/chat/chat.js"],"names":["React","useState","useEffect","useNavigate","useLocation","Link","DecodeToken","AxiosRequest","Axios","Chat","user_id","localStorage","getItem","socketDetails","setSocketDetails","username","ws_api","location","chat_id","pathname","slice","yy","message","setMessage","messageData","setMessageData","onopen","console","log","onclose","onmessage","res","data","retrieveMessages","socketMessages","msg_data","JSON","stringify","send","getMessage","get","then","RenderMessages","map","each","sender","backgroundColor","borderRadius","padding","fontSize","sender_name","fontSIZE","time","WebSocket","window","e","target","value"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react'\nimport { useNavigate, useLocation } from 'react-router'\nimport { Link } from 'react-router-dom'\nimport { DecodeToken } from '../token_decode'\nimport AxiosRequest from '../../axios'\nimport { Axios } from 'axios'\n\n\n\nconst Chat = () => {\n\n    const user_id = DecodeToken(localStorage.getItem(\"access_token\")).user_id\n    const [socketDetails,setSocketDetails] = useState({user_id:null,username:null,ws_api:null})\n    const location = useLocation()\n    const chat_id = location.pathname.slice(14)\n    const yy =location.pathname.slice(14)\n    const [message,setMessage] = useState(\"\")\n    const [messageData,setMessageData] = useState([])\n\n    if(socketDetails.ws_api){\n\n    socketDetails.ws_api.onopen = () => {console.log(\"connection established\")}\n    socketDetails.ws_api.onclose = () => {console.log(\"disconnected\")}\n\n    socketDetails.ws_api.onmessage = (res) => {\n        if(res.data){\n            console.log(res.data)\n            retrieveMessages();\n        }\n    }\n\n    }\n\n    const socketMessages = () => {\n        const msg_data = JSON.stringify({\"data\":message,\"code\":chat_id,\"type\":\"send\"})\n        if(msg_data.data !== \"\"){\n            socketDetails.ws_api.send(msg_data);\n        }\n    }\n\n    \n    \n   \n\n\n    const retrieveMessages = async() => {\n        const getMessage = await AxiosRequest.get(`/chat/text/${chat_id}`)\n                            .then((res) => {\n                                console.log(res.data)\n                                setMessageData(res.data);\n                            })\n\n        // ws request to get message\n        // const messagesList = JSON.stringify({\"data\":message,\"code\":chat_id,\"type\":\"fetch\"})\n        // ws_api.send(messagesList); \n\n    }\n    // http request to store message\n    // const sendMessages = async() => {\n    //     const sendMessage = await AxiosRequest.post(`/chat/text/${chat_id}`,{\"data\":message})\n    //                         .then((res) => {retrieveMessages();})\n    // }\n\n\n\n\n    let RenderMessages = messageData.map((each) => {\n        console.log(each)\n        if(user_id == each.sender){\n            return(\n                <div className='col-md-5 mt-3 mb-3' style={{backgroundColor:\"pink\",borderRadius:\"10px\", padding:\"5px\"}}>\n                <div className='d-flex'>\n                <p style={{fontSize:\"13px\"}}>{each.sender_name}</p> \n                <p style={{fontSIZE:\"10px\"}}>{each.time.slice(0,10)}</p>\n                <p style={{fontSIZE:\"10px\"}}>{each.time.slice(11,17)}</p>\n                </div>\n                <p style={{fontSize:\"15px\"}}>{each.data}</p>\n                </div>\n\n            );\n        }\n        else{\n            return(\n            <div className='mt-3 mb-3 col-md-5' style={{backgroundColor:\"white\",borderRadius:\"10px\", padding:\"5px\"}}>\n                <p style={{fontSize:\"13px\"}}>{each.sender_name}</p>\n                <p style={{fontSize:\"15px\"}}>{each.data}</p>\n            </div>\n            )\n        }\n    })\n\n    \n\n    useEffect(() => {\n        const user_id = DecodeToken(localStorage.getItem(\"access_token\")).user_id\n        const username = DecodeToken(localStorage.getItem(\"access_token\")).username\n        const ws_api = new WebSocket(`ws://localhost:8000/ws/chat/${window.location.pathname.slice(14)}`);\n        setSocketDetails({user_id:user_id,username:username,ws_api:ws_api})\n        retrieveMessages();\n    }, [])\n    \n\n\n    return (\n    <div className='container-fluid mt-4 ml-4'>\n        <div className='d-flex'>\n            <input placeholder='Enter the message' onChange={(e) => {setMessage(e.target.value)}}></input>\n           \n            <button className='btn btn-dark' onClick={socketMessages}>Send</button>\n        </div>\n        <div className='row'>\n\n            <div className='col-md-4'></div>\n            <div className='col-md-8'>\n                {RenderMessages}\n            </div>\n           \n        </div>\n      \n    </div>\n  )\n}\n\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}