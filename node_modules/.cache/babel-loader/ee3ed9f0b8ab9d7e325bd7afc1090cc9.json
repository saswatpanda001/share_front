{"ast":null,"code":"// MIT License:\n//\n// Copyright (c) 2010-2012, Joe Walnes\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n * This behaves like a WebSocket in every way, except if it fails to connect,\n * or it gets disconnected, it will repeatedly poll until it successfully connects\n * again.\n *\n * It is API compatible, so when you have:\n *   ws = new WebSocket('ws://....');\n * you can replace with:\n *   ws = new ReconnectingWebSocket('ws://....');\n *\n * The event stream will typically look like:\n *  onconnecting\n *  onopen\n *  onmessage\n *  onmessage\n *  onclose // lost connection\n *  onconnecting\n *  onopen  // sometime later...\n *  onmessage\n *  onmessage\n *  etc...\n *\n * It is API compatible with the standard WebSocket API, apart from the following members:\n *\n * - `bufferedAmount`\n * - `extensions`\n * - `binaryType`\n *\n * Latest version: https://github.com/joewalnes/reconnecting-websocket/\n * - Joe Walnes\n *\n * Syntax\n * ======\n * var socket = new ReconnectingWebSocket(url, protocols, options);\n *\n * Parameters\n * ==========\n * url - The url you are connecting to.\n * protocols - Optional string or array of protocols.\n * options - See below\n *\n * Options\n * =======\n * Options can either be passed upon instantiation or set after instantiation:\n *\n * var socket = new ReconnectingWebSocket(url, null, { debug: true, reconnectInterval: 4000 });\n *\n * or\n *\n * var socket = new ReconnectingWebSocket(url);\n * socket.debug = true;\n * socket.reconnectInterval = 4000;\n *\n * debug\n * - Whether this instance should log debug messages. Accepts true or false. Default: false.\n *\n * automaticOpen\n * - Whether or not the websocket should attempt to connect immediately upon instantiation. The socket can be manually opened or closed at any time using ws.open() and ws.close().\n *\n * reconnectInterval\n * - The number of milliseconds to delay before attempting to reconnect. Accepts integer. Default: 1000.\n *\n * maxReconnectInterval\n * - The maximum number of milliseconds to delay a reconnection attempt. Accepts integer. Default: 30000.\n *\n * reconnectDecay\n * - The rate of increase of the reconnect delay. Allows reconnect attempts to back off when problems persist. Accepts integer or float. Default: 1.5.\n *\n * timeoutInterval\n * - The maximum time in milliseconds to wait for a connection to succeed before closing and retrying. Accepts integer. Default: 2000.\n *\n */\n(function (global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = factory();\n  } else {\n    global.ReconnectingWebSocket = factory();\n  }\n})(this, function () {\n  if (!('WebSocket' in window)) {\n    return;\n  }\n\n  const ReconnectingWebSocket = (url, protocols, options) => {\n    // Default settings\n    var settings = {\n      /** Whether this instance should log debug messages. */\n      debug: false,\n\n      /** Whether or not the websocket should attempt to connect immediately upon instantiation. */\n      automaticOpen: true,\n\n      /** The number of milliseconds to delay before attempting to reconnect. */\n      reconnectInterval: 1000,\n\n      /** The maximum number of milliseconds to delay a reconnection attempt. */\n      maxReconnectInterval: 30000,\n\n      /** The rate of increase of the reconnect delay. Allows reconnect attempts to back off when problems persist. */\n      reconnectDecay: 1.5,\n\n      /** The maximum time in milliseconds to wait for a connection to succeed before closing and retrying. */\n      timeoutInterval: 2000,\n\n      /** The maximum number of reconnection attempts to make. Unlimited if null. */\n      maxReconnectAttempts: null,\n\n      /** The binary type, possible values 'blob' or 'arraybuffer', default 'blob'. */\n      binaryType: 'blob'\n    };\n\n    if (!options) {\n      options = {};\n    } // Overwrite and define settings with options if they exist.\n\n\n    for (var key in settings) {\n      if (typeof options[key] !== 'undefined') {\n        this[key] = options[key];\n      } else {\n        this[key] = settings[key];\n      }\n    } // These should be treated as read-only properties\n\n    /** The URL as resolved by the constructor. This is always an absolute URL. Read only. */\n\n\n    this.url = url;\n    /** The number of attempted reconnects since starting, or the last successful connection. Read only. */\n\n    this.reconnectAttempts = 0;\n    /**\n     * The current state of the connection.\n     * Can be one of: WebSocket.CONNECTING, WebSocket.OPEN, WebSocket.CLOSING, WebSocket.CLOSED\n     * Read only.\n     */\n\n    this.readyState = WebSocket.CONNECTING;\n    /**\n     * A string indicating the name of the sub-protocol the server selected; this will be one of\n     * the strings specified in the protocols parameter when creating the WebSocket object.\n     * Read only.\n     */\n\n    this.protocol = null; // Private state variables\n\n    var self = this;\n    var ws;\n    var forcedClose = false;\n    var timedOut = false;\n    var eventTarget = document.createElement('div'); // Wire up \"on*\" properties as event handlers\n\n    eventTarget.addEventListener('open', function (event) {\n      self.onopen(event);\n    });\n    eventTarget.addEventListener('close', function (event) {\n      self.onclose(event);\n    });\n    eventTarget.addEventListener('connecting', function (event) {\n      self.onconnecting(event);\n    });\n    eventTarget.addEventListener('message', function (event) {\n      self.onmessage(event);\n    });\n    eventTarget.addEventListener('error', function (event) {\n      self.onerror(event);\n    }); // Expose the API required by EventTarget\n\n    this.addEventListener = eventTarget.addEventListener.bind(eventTarget);\n    this.removeEventListener = eventTarget.removeEventListener.bind(eventTarget);\n    this.dispatchEvent = eventTarget.dispatchEvent.bind(eventTarget);\n    /**\n     * This function generates an event that is compatible with standard\n     * compliant browsers and IE9 - IE11\n     *\n     * This will prevent the error:\n     * Object doesn't support this action\n     *\n     * http://stackoverflow.com/questions/19345392/why-arent-my-parameters-getting-passed-through-to-a-dispatched-event/19345563#19345563\n     * @param s String The name that the event should use\n     * @param args Object an optional object that the event will use\n     */\n\n    function generateEvent(s, args) {\n      var evt = document.createEvent(\"CustomEvent\");\n      evt.initCustomEvent(s, false, false, args);\n      return evt;\n    }\n\n    ;\n\n    this.open = function (reconnectAttempt) {\n      ws = new WebSocket(self.url, protocols || []);\n      ws.binaryType = this.binaryType;\n\n      if (reconnectAttempt) {\n        if (this.maxReconnectAttempts && this.reconnectAttempts > this.maxReconnectAttempts) {\n          return;\n        }\n      } else {\n        eventTarget.dispatchEvent(generateEvent('connecting'));\n        this.reconnectAttempts = 0;\n      }\n\n      if (self.debug || ReconnectingWebSocket.debugAll) {\n        console.debug('ReconnectingWebSocket', 'attempt-connect', self.url);\n      }\n\n      var localWs = ws;\n      var timeout = setTimeout(function () {\n        if (self.debug || ReconnectingWebSocket.debugAll) {\n          console.debug('ReconnectingWebSocket', 'connection-timeout', self.url);\n        }\n\n        timedOut = true;\n        localWs.close();\n        timedOut = false;\n      }, self.timeoutInterval);\n\n      ws.onopen = function (event) {\n        clearTimeout(timeout);\n\n        if (self.debug || ReconnectingWebSocket.debugAll) {\n          console.debug('ReconnectingWebSocket', 'onopen', self.url);\n        }\n\n        self.protocol = ws.protocol;\n        self.readyState = WebSocket.OPEN;\n        self.reconnectAttempts = 0;\n        var e = generateEvent('open');\n        e.isReconnect = reconnectAttempt;\n        reconnectAttempt = false;\n        eventTarget.dispatchEvent(e);\n      };\n\n      ws.onclose = function (event) {\n        clearTimeout(timeout);\n        ws = null;\n\n        if (forcedClose) {\n          self.readyState = WebSocket.CLOSED;\n          eventTarget.dispatchEvent(generateEvent('close'));\n        } else {\n          self.readyState = WebSocket.CONNECTING;\n          var e = generateEvent('connecting');\n          e.code = event.code;\n          e.reason = event.reason;\n          e.wasClean = event.wasClean;\n          eventTarget.dispatchEvent(e);\n\n          if (!reconnectAttempt && !timedOut) {\n            if (self.debug || ReconnectingWebSocket.debugAll) {\n              console.debug('ReconnectingWebSocket', 'onclose', self.url);\n            }\n\n            eventTarget.dispatchEvent(generateEvent('close'));\n          }\n\n          var timeout = self.reconnectInterval * Math.pow(self.reconnectDecay, self.reconnectAttempts);\n          setTimeout(function () {\n            self.reconnectAttempts++;\n            self.open(true);\n          }, timeout > self.maxReconnectInterval ? self.maxReconnectInterval : timeout);\n        }\n      };\n\n      ws.onmessage = function (event) {\n        if (self.debug || ReconnectingWebSocket.debugAll) {\n          console.debug('ReconnectingWebSocket', 'onmessage', self.url, event.data);\n        }\n\n        var e = generateEvent('message');\n        e.data = event.data;\n        eventTarget.dispatchEvent(e);\n      };\n\n      ws.onerror = function (event) {\n        if (self.debug || ReconnectingWebSocket.debugAll) {\n          console.debug('ReconnectingWebSocket', 'onerror', self.url, event);\n        }\n\n        eventTarget.dispatchEvent(generateEvent('error'));\n      };\n    }; // Whether or not to create a websocket upon instantiation\n\n\n    if (this.automaticOpen == true) {\n      this.open(false);\n    }\n    /**\n     * Transmits data to the server over the WebSocket connection.\n     *\n     * @param data a text string, ArrayBuffer or Blob to send to the server.\n     */\n\n\n    this.send = function (data) {\n      if (ws) {\n        if (self.debug || ReconnectingWebSocket.debugAll) {\n          console.debug('ReconnectingWebSocket', 'send', self.url, data);\n        }\n\n        return ws.send(data);\n      } else {\n        throw 'INVALID_STATE_ERR : Pausing to reconnect websocket';\n      }\n    };\n    /**\n     * Closes the WebSocket connection or connection attempt, if any.\n     * If the connection is already CLOSED, this method does nothing.\n     */\n\n\n    this.close = function (code, reason) {\n      // Default CLOSE_NORMAL code\n      if (typeof code == 'undefined') {\n        code = 1000;\n      }\n\n      forcedClose = true;\n\n      if (ws) {\n        ws.close(code, reason);\n      }\n    };\n    /**\n     * Additional public API method to refresh the connection if still open (close, re-open).\n     * For example, if the app suspects bad data / missed heart beats, it can try to refresh.\n     */\n\n\n    this.refresh = function () {\n      if (ws) {\n        ws.close();\n      }\n    };\n  };\n  /**\n   * An event listener to be called when the WebSocket connection's readyState changes to OPEN;\n   * this indicates that the connection is ready to send and receive data.\n   */\n\n\n  ReconnectingWebSocket.prototype.onopen = function (event) {};\n  /** An event listener to be called when the WebSocket connection's readyState changes to CLOSED. */\n\n\n  ReconnectingWebSocket.prototype.onclose = function (event) {};\n  /** An event listener to be called when a connection begins being attempted. */\n\n\n  ReconnectingWebSocket.prototype.onconnecting = function (event) {};\n  /** An event listener to be called when a message is received from the server. */\n\n\n  ReconnectingWebSocket.prototype.onmessage = function (event) {};\n  /** An event listener to be called when an error occurs. */\n\n\n  ReconnectingWebSocket.prototype.onerror = function (event) {};\n  /**\n   * Whether all instances of ReconnectingWebSocket should log debug messages.\n   * Setting this to true is the equivalent of setting all instances of ReconnectingWebSocket.debug to true.\n   */\n\n\n  ReconnectingWebSocket.debugAll = false;\n  ReconnectingWebSocket.CONNECTING = WebSocket.CONNECTING;\n  ReconnectingWebSocket.OPEN = WebSocket.OPEN;\n  ReconnectingWebSocket.CLOSING = WebSocket.CLOSING;\n  ReconnectingWebSocket.CLOSED = WebSocket.CLOSED;\n  return ReconnectingWebSocket;\n});\n\nexport default ReconnectingWebSocket;","map":{"version":3,"sources":["/home/saswat/Desktop/Shareme/frontend/src/Components/chat/reconnecting-websocket.js"],"names":["global","factory","define","amd","module","exports","ReconnectingWebSocket","window","url","protocols","options","settings","debug","automaticOpen","reconnectInterval","maxReconnectInterval","reconnectDecay","timeoutInterval","maxReconnectAttempts","binaryType","key","reconnectAttempts","readyState","WebSocket","CONNECTING","protocol","self","ws","forcedClose","timedOut","eventTarget","document","createElement","addEventListener","event","onopen","onclose","onconnecting","onmessage","onerror","bind","removeEventListener","dispatchEvent","generateEvent","s","args","evt","createEvent","initCustomEvent","open","reconnectAttempt","debugAll","console","localWs","timeout","setTimeout","close","clearTimeout","OPEN","e","isReconnect","CLOSED","code","reason","wasClean","Math","pow","data","send","refresh","prototype","CLOSING"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,UAAUA,MAAV,EAAkBC,OAAlB,EAA2B;AACxB,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AAC5CD,IAAAA,MAAM,CAAC,EAAD,EAAKD,OAAL,CAAN;AACH,GAFD,MAEO,IAAI,OAAOG,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACC,OAA5C,EAAoD;AACvDD,IAAAA,MAAM,CAACC,OAAP,GAAiBJ,OAAO,EAAxB;AACH,GAFM,MAEA;AACHD,IAAAA,MAAM,CAACM,qBAAP,GAA+BL,OAAO,EAAtC;AACH;AACJ,CARD,EAQG,IARH,EAQS,YAAY;AAEjB,MAAI,EAAE,eAAeM,MAAjB,CAAJ,EAA8B;AAC1B;AACH;;AAED,QAAMD,qBAAqB,GAAG,CAACE,GAAD,EAAMC,SAAN,EAAiBC,OAAjB,KAA6B;AAEvD;AACA,QAAIC,QAAQ,GAAG;AAEX;AACAC,MAAAA,KAAK,EAAE,KAHI;;AAKX;AACAC,MAAAA,aAAa,EAAE,IANJ;;AAQX;AACAC,MAAAA,iBAAiB,EAAE,IATR;;AAUX;AACAC,MAAAA,oBAAoB,EAAE,KAXX;;AAYX;AACAC,MAAAA,cAAc,EAAE,GAbL;;AAeX;AACAC,MAAAA,eAAe,EAAE,IAhBN;;AAkBX;AACAC,MAAAA,oBAAoB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","sourcesContent":["// MIT License:\n//\n// Copyright (c) 2010-2012, Joe Walnes\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n * This behaves like a WebSocket in every way, except if it fails to connect,\n * or it gets disconnected, it will repeatedly poll until it successfully connects\n * again.\n *\n * It is API compatible, so when you have:\n *   ws = new WebSocket('ws://....');\n * you can replace with:\n *   ws = new ReconnectingWebSocket('ws://....');\n *\n * The event stream will typically look like:\n *  onconnecting\n *  onopen\n *  onmessage\n *  onmessage\n *  onclose // lost connection\n *  onconnecting\n *  onopen  // sometime later...\n *  onmessage\n *  onmessage\n *  etc...\n *\n * It is API compatible with the standard WebSocket API, apart from the following members:\n *\n * - `bufferedAmount`\n * - `extensions`\n * - `binaryType`\n *\n * Latest version: https://github.com/joewalnes/reconnecting-websocket/\n * - Joe Walnes\n *\n * Syntax\n * ======\n * var socket = new ReconnectingWebSocket(url, protocols, options);\n *\n * Parameters\n * ==========\n * url - The url you are connecting to.\n * protocols - Optional string or array of protocols.\n * options - See below\n *\n * Options\n * =======\n * Options can either be passed upon instantiation or set after instantiation:\n *\n * var socket = new ReconnectingWebSocket(url, null, { debug: true, reconnectInterval: 4000 });\n *\n * or\n *\n * var socket = new ReconnectingWebSocket(url);\n * socket.debug = true;\n * socket.reconnectInterval = 4000;\n *\n * debug\n * - Whether this instance should log debug messages. Accepts true or false. Default: false.\n *\n * automaticOpen\n * - Whether or not the websocket should attempt to connect immediately upon instantiation. The socket can be manually opened or closed at any time using ws.open() and ws.close().\n *\n * reconnectInterval\n * - The number of milliseconds to delay before attempting to reconnect. Accepts integer. Default: 1000.\n *\n * maxReconnectInterval\n * - The maximum number of milliseconds to delay a reconnection attempt. Accepts integer. Default: 30000.\n *\n * reconnectDecay\n * - The rate of increase of the reconnect delay. Allows reconnect attempts to back off when problems persist. Accepts integer or float. Default: 1.5.\n *\n * timeoutInterval\n * - The maximum time in milliseconds to wait for a connection to succeed before closing and retrying. Accepts integer. Default: 2000.\n *\n */\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof module !== 'undefined' && module.exports){\n        module.exports = factory();\n    } else {\n        global.ReconnectingWebSocket = factory();\n    }\n})(this, function () {\n\n    if (!('WebSocket' in window)) {\n        return;\n    }\n\n    const ReconnectingWebSocket = (url, protocols, options) => {\n\n        // Default settings\n        var settings = {\n\n            /** Whether this instance should log debug messages. */\n            debug: false,\n\n            /** Whether or not the websocket should attempt to connect immediately upon instantiation. */\n            automaticOpen: true,\n\n            /** The number of milliseconds to delay before attempting to reconnect. */\n            reconnectInterval: 1000,\n            /** The maximum number of milliseconds to delay a reconnection attempt. */\n            maxReconnectInterval: 30000,\n            /** The rate of increase of the reconnect delay. Allows reconnect attempts to back off when problems persist. */\n            reconnectDecay: 1.5,\n\n            /** The maximum time in milliseconds to wait for a connection to succeed before closing and retrying. */\n            timeoutInterval: 2000,\n\n            /** The maximum number of reconnection attempts to make. Unlimited if null. */\n            maxReconnectAttempts: null,\n\n            /** The binary type, possible values 'blob' or 'arraybuffer', default 'blob'. */\n            binaryType: 'blob'\n        }\n        if (!options) { options = {}; }\n\n        // Overwrite and define settings with options if they exist.\n        for (var key in settings) {\n            if (typeof options[key] !== 'undefined') {\n                this[key] = options[key];\n            } else {\n                this[key] = settings[key];\n            }\n        }\n\n        // These should be treated as read-only properties\n\n        /** The URL as resolved by the constructor. This is always an absolute URL. Read only. */\n        this.url = url;\n\n        /** The number of attempted reconnects since starting, or the last successful connection. Read only. */\n        this.reconnectAttempts = 0;\n\n        /**\n         * The current state of the connection.\n         * Can be one of: WebSocket.CONNECTING, WebSocket.OPEN, WebSocket.CLOSING, WebSocket.CLOSED\n         * Read only.\n         */\n        this.readyState = WebSocket.CONNECTING;\n\n        /**\n         * A string indicating the name of the sub-protocol the server selected; this will be one of\n         * the strings specified in the protocols parameter when creating the WebSocket object.\n         * Read only.\n         */\n        this.protocol = null;\n\n        // Private state variables\n\n        var self = this;\n        var ws;\n        var forcedClose = false;\n        var timedOut = false;\n        var eventTarget = document.createElement('div');\n\n        // Wire up \"on*\" properties as event handlers\n\n        eventTarget.addEventListener('open',       function(event) { self.onopen(event); });\n        eventTarget.addEventListener('close',      function(event) { self.onclose(event); });\n        eventTarget.addEventListener('connecting', function(event) { self.onconnecting(event); });\n        eventTarget.addEventListener('message',    function(event) { self.onmessage(event); });\n        eventTarget.addEventListener('error',      function(event) { self.onerror(event); });\n\n        // Expose the API required by EventTarget\n\n        this.addEventListener = eventTarget.addEventListener.bind(eventTarget);\n        this.removeEventListener = eventTarget.removeEventListener.bind(eventTarget);\n        this.dispatchEvent = eventTarget.dispatchEvent.bind(eventTarget);\n\n        /**\n         * This function generates an event that is compatible with standard\n         * compliant browsers and IE9 - IE11\n         *\n         * This will prevent the error:\n         * Object doesn't support this action\n         *\n         * http://stackoverflow.com/questions/19345392/why-arent-my-parameters-getting-passed-through-to-a-dispatched-event/19345563#19345563\n         * @param s String The name that the event should use\n         * @param args Object an optional object that the event will use\n         */\n        function generateEvent(s, args) {\n        \tvar evt = document.createEvent(\"CustomEvent\");\n        \tevt.initCustomEvent(s, false, false, args);\n        \treturn evt;\n        };\n\n        this.open = function (reconnectAttempt) {\n            ws = new WebSocket(self.url, protocols || []);\n            ws.binaryType = this.binaryType;\n\n            if (reconnectAttempt) {\n                if (this.maxReconnectAttempts && this.reconnectAttempts > this.maxReconnectAttempts) {\n                    return;\n                }\n            } else {\n                eventTarget.dispatchEvent(generateEvent('connecting'));\n                this.reconnectAttempts = 0;\n            }\n\n            if (self.debug || ReconnectingWebSocket.debugAll) {\n                console.debug('ReconnectingWebSocket', 'attempt-connect', self.url);\n            }\n\n            var localWs = ws;\n            var timeout = setTimeout(function() {\n                if (self.debug || ReconnectingWebSocket.debugAll) {\n                    console.debug('ReconnectingWebSocket', 'connection-timeout', self.url);\n                }\n                timedOut = true;\n                localWs.close();\n                timedOut = false;\n            }, self.timeoutInterval);\n\n            ws.onopen = function(event) {\n                clearTimeout(timeout);\n                if (self.debug || ReconnectingWebSocket.debugAll) {\n                    console.debug('ReconnectingWebSocket', 'onopen', self.url);\n                }\n                self.protocol = ws.protocol;\n                self.readyState = WebSocket.OPEN;\n                self.reconnectAttempts = 0;\n                var e = generateEvent('open');\n                e.isReconnect = reconnectAttempt;\n                reconnectAttempt = false;\n                eventTarget.dispatchEvent(e);\n            };\n\n            ws.onclose = function(event) {\n                clearTimeout(timeout);\n                ws = null;\n                if (forcedClose) {\n                    self.readyState = WebSocket.CLOSED;\n                    eventTarget.dispatchEvent(generateEvent('close'));\n                } else {\n                    self.readyState = WebSocket.CONNECTING;\n                    var e = generateEvent('connecting');\n                    e.code = event.code;\n                    e.reason = event.reason;\n                    e.wasClean = event.wasClean;\n                    eventTarget.dispatchEvent(e);\n                    if (!reconnectAttempt && !timedOut) {\n                        if (self.debug || ReconnectingWebSocket.debugAll) {\n                            console.debug('ReconnectingWebSocket', 'onclose', self.url);\n                        }\n                        eventTarget.dispatchEvent(generateEvent('close'));\n                    }\n\n                    var timeout = self.reconnectInterval * Math.pow(self.reconnectDecay, self.reconnectAttempts);\n                    setTimeout(function() {\n                        self.reconnectAttempts++;\n                        self.open(true);\n                    }, timeout > self.maxReconnectInterval ? self.maxReconnectInterval : timeout);\n                }\n            };\n            ws.onmessage = function(event) {\n                if (self.debug || ReconnectingWebSocket.debugAll) {\n                    console.debug('ReconnectingWebSocket', 'onmessage', self.url, event.data);\n                }\n                var e = generateEvent('message');\n                e.data = event.data;\n                eventTarget.dispatchEvent(e);\n            };\n            ws.onerror = function(event) {\n                if (self.debug || ReconnectingWebSocket.debugAll) {\n                    console.debug('ReconnectingWebSocket', 'onerror', self.url, event);\n                }\n                eventTarget.dispatchEvent(generateEvent('error'));\n            };\n        }\n\n        // Whether or not to create a websocket upon instantiation\n        if (this.automaticOpen == true) {\n            this.open(false);\n        }\n\n        /**\n         * Transmits data to the server over the WebSocket connection.\n         *\n         * @param data a text string, ArrayBuffer or Blob to send to the server.\n         */\n        this.send = function(data) {\n            if (ws) {\n                if (self.debug || ReconnectingWebSocket.debugAll) {\n                    console.debug('ReconnectingWebSocket', 'send', self.url, data);\n                }\n                return ws.send(data);\n            } else {\n                throw 'INVALID_STATE_ERR : Pausing to reconnect websocket';\n            }\n        };\n\n        /**\n         * Closes the WebSocket connection or connection attempt, if any.\n         * If the connection is already CLOSED, this method does nothing.\n         */\n        this.close = function(code, reason) {\n            // Default CLOSE_NORMAL code\n            if (typeof code == 'undefined') {\n                code = 1000;\n            }\n            forcedClose = true;\n            if (ws) {\n                ws.close(code, reason);\n            }\n        };\n\n        /**\n         * Additional public API method to refresh the connection if still open (close, re-open).\n         * For example, if the app suspects bad data / missed heart beats, it can try to refresh.\n         */\n        this.refresh = function() {\n            if (ws) {\n                ws.close();\n            }\n        };\n    }\n\n    /**\n     * An event listener to be called when the WebSocket connection's readyState changes to OPEN;\n     * this indicates that the connection is ready to send and receive data.\n     */\n    ReconnectingWebSocket.prototype.onopen = function(event) {};\n    /** An event listener to be called when the WebSocket connection's readyState changes to CLOSED. */\n    ReconnectingWebSocket.prototype.onclose = function(event) {};\n    /** An event listener to be called when a connection begins being attempted. */\n    ReconnectingWebSocket.prototype.onconnecting = function(event) {};\n    /** An event listener to be called when a message is received from the server. */\n    ReconnectingWebSocket.prototype.onmessage = function(event) {};\n    /** An event listener to be called when an error occurs. */\n    ReconnectingWebSocket.prototype.onerror = function(event) {};\n\n    /**\n     * Whether all instances of ReconnectingWebSocket should log debug messages.\n     * Setting this to true is the equivalent of setting all instances of ReconnectingWebSocket.debug to true.\n     */\n    ReconnectingWebSocket.debugAll = false;\n\n    ReconnectingWebSocket.CONNECTING = WebSocket.CONNECTING;\n    ReconnectingWebSocket.OPEN = WebSocket.OPEN;\n    ReconnectingWebSocket.CLOSING = WebSocket.CLOSING;\n    ReconnectingWebSocket.CLOSED = WebSocket.CLOSED;\n\n    return ReconnectingWebSocket;\n});\n\nexport default ReconnectingWebSocket;\n"]},"metadata":{},"sourceType":"module"}