{"ast":null,"code":"var _jsxFileName = \"/home/saswat/Desktop/Food App/src/components/omdbmovies/MovieList.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { MovieAPIKey } from '../../API/MovieAPIKey';\nimport MovieAPI from '../../API/MovieAPI';\nimport MovieCard from './MovieCard';\nimport NotesList from '../pages/NotesList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RenderMovies = props => {\n  _s();\n\n  const [render, setRender] = useState(null);\n\n  const CheckProps = () => {\n    if (props.searchData) {\n      const MovieData = props.searchData;\n      const RenderMovies = MovieData.map(each => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            margin: \"8%\"\n          },\n          children: /*#__PURE__*/_jsxDEV(MovieCard, {\n            movieData: each\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 44\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 17\n        }, this);\n      });\n    } else {\n      const RenderAlert = () => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          align: \"center\",\n          style: {\n            margin: \"8%\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"No Data to display\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 59\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 17\n        }, this);\n      };\n\n      setRender(RenderAlert);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: \"4%\",\n      maxWidth: \"100%\",\n      \"display\": \"grid\",\n      \"gridTemplateColumns\": \"repeat(auto-fit, minmax(300px, 1fr))\"\n    },\n    children: RenderMovies\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n\n_s(RenderMovies, \"gDDJtXOUeIRcav2ZVg9IcuAMe6A=\");\n\n_c = RenderMovies;\nexport default RenderMovies;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderMovies\");","map":{"version":3,"sources":["/home/saswat/Desktop/Food App/src/components/omdbmovies/MovieList.js"],"names":["React","useState","useEffect","MovieAPIKey","MovieAPI","MovieCard","NotesList","RenderMovies","props","render","setRender","CheckProps","searchData","MovieData","map","each","margin","RenderAlert","maxWidth"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAkBC,SAAlB,QAAmC,OAAnC;AACA,SAAQC,WAAR,QAA0B,uBAA1B;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;;;AAGA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC5B,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAqBT,QAAQ,CAAC,IAAD,CAAnC;;AAEA,QAAMU,UAAU,GAAG,MAAM;AACvB,QAAGH,KAAK,CAACI,UAAT,EAAoB;AAClB,YAAMC,SAAS,GAAGL,KAAK,CAACI,UAAxB;AACA,YAAML,YAAY,GAAGM,SAAS,CAACC,GAAV,CAAeC,IAAD,IAAU;AACzC,4BACI;AAAK,UAAA,KAAK,EAAE;AAACC,YAAAA,MAAM,EAAC;AAAR,WAAZ;AAAA,iCAA2B,QAAC,SAAD;AAAW,YAAA,SAAS,EAAED;AAAtB;AAAA;AAAA;AAAA;AAAA;AAA3B;AAAA;AAAA;AAAA;AAAA,gBADJ;AAEH,OAHoB,CAArB;AAKH,KAPC,MAQE;AACA,YAAME,WAAW,GAAE,MAAM;AACrB,4BACI;AAAK,UAAA,KAAK,EAAC,QAAX;AAAoB,UAAA,KAAK,EAAE;AAACD,YAAAA,MAAM,EAAC;AAAR,WAA3B;AAAA,iCAA0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA1C;AAAA;AAAA;AAAA;AAAA,gBADJ;AAGH,OAJD;;AAKAN,MAAAA,SAAS,CAACO,WAAD,CAAT;AACH;AAAC,GAhBF;;AAkBA,sBACI;AAAK,IAAA,KAAK,EAAE;AAACD,MAAAA,MAAM,EAAC,IAAR;AAAaE,MAAAA,QAAQ,EAAC,MAAtB;AAA6B,iBAAU,MAAvC;AAA8C,6BAAuB;AAArE,KAAZ;AAAA,cACKX;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA1BD;;GAAMA,Y;;KAAAA,Y;AA2BN,eAAeA,YAAf","sourcesContent":["import React from 'react'\nimport { useState,useEffect } from 'react'\nimport {MovieAPIKey} from '../../API/MovieAPIKey'\nimport MovieAPI from '../../API/MovieAPI'\nimport MovieCard from './MovieCard'\nimport NotesList from '../pages/NotesList'\n\n\nconst RenderMovies = (props) => {\n    const [render,setRender] = useState(null);\n\n    const CheckProps = () => {\n      if(props.searchData){\n        const MovieData = props.searchData;\n        const RenderMovies = MovieData.map((each) => {\n            return(\n                <div style={{margin:\"8%\"}}><MovieCard movieData={each}/></div>);\n        })\n        \n    }\n    else{\n        const RenderAlert =() => {\n            return(\n                <div align=\"center\" style={{margin:\"8%\"}}><h1>No Data to display</h1></div>\n                );\n        }\n        setRender(RenderAlert);\n    }}\n\n    return(\n        <div style={{margin:\"4%\",maxWidth:\"100%\",\"display\":\"grid\",\"gridTemplateColumns\": \"repeat(auto-fit, minmax(300px, 1fr))\"}}>\n            {RenderMovies}\n        </div>\n    );\n}\nexport default RenderMovies;"]},"metadata":{},"sourceType":"module"}